#!/usr/bin/env node

/**
 * GitHub MCP Auto Git System - Refactored Main Entry Point
 * Modularized implementation following Constitutional AI principles
 */

import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { GitAutoMCP } from './core/git-auto-mcp.js';
import { CLICommandHandler, CommandResult } from './core/cli-command-handler.js';

// Load environment variables
config();

/**
 * Main application entry point
 * Fail Fast: Immediate error handling and validation
 * Be Lazy: Efficient command routing without redundant processing
 * TypeScript First: Complete type safety for main execution flow
 */
async function main(): Promise<void> {
  const args = process.argv.slice(2);
  
  // Create core system instance
  const gitAutoMCP = new GitAutoMCP();
  
  // Create CLI command handler
  const cliHandler = new CLICommandHandler(gitAutoMCP);
  
  // Setup graceful shutdown
  setupGracefulShutdown(gitAutoMCP);
  
  try {
    // Execute command
    const result: CommandResult = await cliHandler.executeCommand(args);
    
    // Handle command result
    if (!result.success) {
      console.error(`‚ùå „Ç≥„Éû„É≥„ÉâÂÆüË°åÂ§±Êïó: ${result.message}`);
      process.exit(result.exitCode || 1);
    }
    
    // If watching mode, keep process alive
    if (args[0] === 'watch') {
      // Process will continue running until interrupted
      return;
    }
    
    // For other commands, exit with appropriate code
    process.exit(result.exitCode || 0);
    
  } catch (error) {
    console.error('‚ùå ‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
    
    // Attempt graceful cleanup
    try {
      await gitAutoMCP.stop();
    } catch (cleanupError) {
      console.error('‚ùå „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', cleanupError);
    }
    
    process.exit(1);
  }
}

/**
 * Setup graceful shutdown handlers
 * Fail Fast: Immediate cleanup on termination signals
 * Be Lazy: Efficient resource cleanup
 */
function setupGracefulShutdown(gitAutoMCP: GitAutoMCP): void {
  const handleShutdown = async (signal: string) => {
    console.log(`\nüõë ${signal} „Ç∑„Ç∞„Éä„É´„ÇíÂèó‰ø°„Åó„Åæ„Åó„Åü...`);
    
    try {
      await gitAutoMCP.stop();
      console.log('‚úÖ Ê≠£Â∏∏„Å´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Åó„Åæ„Åó„Åü');
      process.exit(0);
    } catch (error) {
      console.error('‚ùå „Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥„Ç®„É©„Éº:', error);
      process.exit(1);
    }
  };

  // Handle various termination signals
  process.on('SIGINT', () => handleShutdown('SIGINT'));
  process.on('SIGTERM', () => handleShutdown('SIGTERM'));
  process.on('SIGQUIT', () => handleShutdown('SIGQUIT'));
  
  // Handle uncaught exceptions
  process.on('uncaughtException', async (error) => {
    console.error('‚ùå Êú™Âá¶ÁêÜ‰æãÂ§ñ:', error);
    try {
      await gitAutoMCP.stop();
    } catch (cleanupError) {
      console.error('‚ùå ‰æãÂ§ñÂæå„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', cleanupError);
    }
    process.exit(1);
  });
  
  // Handle unhandled promise rejections
  process.on('unhandledRejection', async (reason, promise) => {
    console.error('‚ùå Êú™Âá¶ÁêÜPromiseÊãíÂê¶:', reason);
    console.error('Promise:', promise);
    try {
      await gitAutoMCP.stop();
    } catch (cleanupError) {
      console.error('‚ùå ÊãíÂê¶Âæå„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Ç®„É©„Éº:', cleanupError);
    }
    process.exit(1);
  });
}

/**
 * Check if this module is being run directly
 * TypeScript First: Type-safe module execution detection
 */
function isMainModule(): boolean {
  const currentFile = fileURLToPath(import.meta.url);
  return Boolean(process.argv[1] && 
    (currentFile === process.argv[1] || 
     currentFile.endsWith(process.argv[1]) ||
     process.argv[1].endsWith('github-auto-git'))); // Global install support
}

// Execute main function if this is the main module
if (isMainModule()) {
  main().catch(error => {
    console.error('‚ùå „É°„Ç§„É≥ÂÆüË°å„Ç®„É©„Éº:', error);
    process.exit(1);
  });
}

// Export for programmatic usage
export { GitAutoMCP };
export default GitAutoMCP;